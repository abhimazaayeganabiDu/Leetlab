// This isyourPrismaschemafile,
//learnmoreaboutitinthedocs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum userRole {
  ADMIN
  USER
}

enum Difficulty {
  EASY
  MEDIUM
  HARD
}

enum playlistProfile {
  PUBLIC
  PRIVATE
}

model User {
  id                           String    @id @default(uuid())
  username                     String    @unique
  name                         String?
  email                        String    @unique
  image                        String
  password                     String
  role                         userRole  @default(USER)
  isVarified                   Boolean   @default(false)
  emailvarificationToken       String?
  emailVarificationTokenExpiry DateTime?
  forgotPasswordToken          String?
  forgotPasswordTokenExpiry    DateTime?
  refreshToken                 String?
  refreshTokenExpiry           DateTime?
  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt

  // Relation
  problem Problem[]
  submission Submission[]
  problemSolved ProblemSolved[]
  playlists Playlist[]

}

model Problem {
  id          String     @id @default(uuid())
  title       String     @unique
  description String
  difficulty  Difficulty
  tags        String[]
  userId      String
  example     Json
  constraints String
  hints       String?
  editorial   String?

  testcases          Json
  codeSnippets      Json
  referenceSolution Json

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships 

  user User @relation(fields:[userId], references:[id], onDelete: Cascade)
  submission Submission[]
  problemSolved ProblemSolved[]
  problemsPlaylists ProblemInPlaylist[]
}


model Submission {
  id String @id @default(uuid())
  userId String
  problemId String
  source_code Json
  language String
  stdin String?
  stdout String?
  stderr String?
  compileOutput String?
  status String
  memory String?
  time String?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields:[userId], references:[id], onDelete:Cascade)
  problem Problem @relation(fields:[problemId], references:[id], onDelete:Cascade)

  testCases TestCaseResult[]
}

model TestCaseResult {
  id String @id @default(uuid())
  submissionId String
  testCase Int
  passed Boolean
  stdout String?
  expected String
  stderr String?
  compileOutput String?
  status String
  memory String?
  time String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  submission Submission @relation(fields:[submissionId], references:[id], onDelete:Cascade)

}

model ProblemSolved {
  id String @id @default(uuid())
  userId String 
  problemId String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields:[userId], references: [id], onDelete:Cascade)
  problem Problem @relation(fields:[problemId], references: [id], onDelete:Cascade)

  @@unique([userId, problemId])
}


model Playlist {
  id String @id @default(uuid())
  name String 
  description String ?
  userId String
  profile playlistProfile @default(PRIVATE)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  problems ProblemInPlaylist[]
  user User @relation(fields:[userId], references:[id], onDelete:Cascade)

  @@unique([name, userId])
  

}

model ProblemInPlaylist {
  id String @id @default(uuid())
  playListId String
  problemId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  playlist Playlist @relation (fields:[playListId], references:[id], onDelete:Cascade)
  problem Problem @relation (fields:[problemId], references:[id], onDelete:Cascade)

  @@unique([playListId, problemId])
}